// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#include "file.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chat_ns {
PROTOBUF_CONSTEXPR GetSingleFileReq::GetSingleFileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetSingleFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSingleFileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSingleFileReqDefaultTypeInternal() {}
  union {
    GetSingleFileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSingleFileReqDefaultTypeInternal _GetSingleFileReq_default_instance_;
PROTOBUF_CONSTEXPR GetSingleFileRsp::GetSingleFileRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_data_)*/nullptr
  , /*decltype(_impl_.success_)*/false} {}
struct GetSingleFileRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSingleFileRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSingleFileRspDefaultTypeInternal() {}
  union {
    GetSingleFileRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSingleFileRspDefaultTypeInternal _GetSingleFileRsp_default_instance_;
PROTOBUF_CONSTEXPR GetMultiFileReq::GetMultiFileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_id_list_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct GetMultiFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiFileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiFileReqDefaultTypeInternal() {}
  union {
    GetMultiFileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiFileReqDefaultTypeInternal _GetMultiFileReq_default_instance_;
PROTOBUF_CONSTEXPR GetMultiFileRsp_FileDataEntry_DoNotUse::GetMultiFileRsp_FileDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GetMultiFileRsp_FileDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiFileRsp_FileDataEntry_DoNotUseDefaultTypeInternal _GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GetMultiFileRsp::GetMultiFileRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMultiFileRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiFileRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiFileRspDefaultTypeInternal() {}
  union {
    GetMultiFileRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiFileRspDefaultTypeInternal _GetMultiFileRsp_default_instance_;
PROTOBUF_CONSTEXPR PutSingleFileReq::PutSingleFileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_data_)*/nullptr} {}
struct PutSingleFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutSingleFileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutSingleFileReqDefaultTypeInternal() {}
  union {
    PutSingleFileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutSingleFileReqDefaultTypeInternal _PutSingleFileReq_default_instance_;
PROTOBUF_CONSTEXPR PutSingleFileRsp::PutSingleFileRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_info_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutSingleFileRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutSingleFileRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutSingleFileRspDefaultTypeInternal() {}
  union {
    PutSingleFileRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutSingleFileRspDefaultTypeInternal _PutSingleFileRsp_default_instance_;
PROTOBUF_CONSTEXPR PutMultiFileReq::PutMultiFileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.file_data_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct PutMultiFileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutMultiFileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutMultiFileReqDefaultTypeInternal() {}
  union {
    PutMultiFileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutMultiFileReqDefaultTypeInternal _PutMultiFileReq_default_instance_;
PROTOBUF_CONSTEXPR PutMultiFileRsp::PutMultiFileRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_info_)*/{}
  , /*decltype(_impl_.request_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errmsg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PutMultiFileRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PutMultiFileRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PutMultiFileRspDefaultTypeInternal() {}
  union {
    PutMultiFileRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PutMultiFileRspDefaultTypeInternal _PutMultiFileRsp_default_instance_;
}  // namespace chat_ns
static ::_pb::Metadata file_level_metadata_file_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_file_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_file_2eproto[1];

const uint32_t TableStruct_file_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileReq, _impl_.file_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileReq, _impl_.session_id_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileRsp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetSingleFileRsp, _impl_.file_data_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileReq, _impl_.file_id_list_),
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::GetMultiFileRsp, _impl_.file_data_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileReq, _impl_.file_data_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutSingleFileRsp, _impl_.file_info_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileReq, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileReq, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileReq, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileReq, _impl_.file_data_),
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileRsp, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileRsp, _impl_.errmsg_),
  PROTOBUF_FIELD_OFFSET(::chat_ns::PutMultiFileRsp, _impl_.file_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::chat_ns::GetSingleFileReq)},
  { 14, 24, -1, sizeof(::chat_ns::GetSingleFileRsp)},
  { 28, 38, -1, sizeof(::chat_ns::GetMultiFileReq)},
  { 42, 50, -1, sizeof(::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse)},
  { 52, -1, -1, sizeof(::chat_ns::GetMultiFileRsp)},
  { 62, 72, -1, sizeof(::chat_ns::PutSingleFileReq)},
  { 76, -1, -1, sizeof(::chat_ns::PutSingleFileRsp)},
  { 86, 96, -1, sizeof(::chat_ns::PutMultiFileReq)},
  { 100, -1, -1, sizeof(::chat_ns::PutMultiFileRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chat_ns::_GetSingleFileReq_default_instance_._instance,
  &::chat_ns::_GetSingleFileRsp_default_instance_._instance,
  &::chat_ns::_GetMultiFileReq_default_instance_._instance,
  &::chat_ns::_GetMultiFileRsp_FileDataEntry_DoNotUse_default_instance_._instance,
  &::chat_ns::_GetMultiFileRsp_default_instance_._instance,
  &::chat_ns::_PutSingleFileReq_default_instance_._instance,
  &::chat_ns::_PutSingleFileRsp_default_instance_._instance,
  &::chat_ns::_PutMultiFileReq_default_instance_._instance,
  &::chat_ns::_PutMultiFileRsp_default_instance_._instance,
};

const char descriptor_table_protodef_file_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nfile.proto\022\007chat_ns\032\nbase.proto\"\201\001\n\020Ge"
  "tSingleFileReq\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007fi"
  "le_id\030\002 \001(\t\022\024\n\007user_id\030\003 \001(\tH\000\210\001\001\022\027\n\nses"
  "sion_id\030\004 \001(\tH\001\210\001\001B\n\n\010_user_idB\r\n\013_sessi"
  "on_id\"\210\001\n\020GetSingleFileRsp\022\022\n\nrequest_id"
  "\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022"
  "1\n\tfile_data\030\004 \001(\0132\031.chat_ns.FileDownloa"
  "dDataH\000\210\001\001B\014\n\n_file_data\"\205\001\n\017GetMultiFil"
  "eReq\022\022\n\nrequest_id\030\001 \001(\t\022\024\n\007user_id\030\002 \001("
  "\tH\000\210\001\001\022\027\n\nsession_id\030\003 \001(\tH\001\210\001\001\022\024\n\014file_"
  "id_list\030\004 \003(\tB\n\n\010_user_idB\r\n\013_session_id"
  "\"\315\001\n\017GetMultiFileRsp\022\022\n\nrequest_id\030\001 \001(\t"
  "\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\0229\n\tfil"
  "e_data\030\004 \003(\0132&.chat_ns.GetMultiFileRsp.F"
  "ileDataEntry\032J\n\rFileDataEntry\022\013\n\003key\030\001 \001"
  "(\t\022(\n\005value\030\002 \001(\0132\031.chat_ns.FileDownload"
  "Data:\0028\001\"\234\001\n\020PutSingleFileReq\022\022\n\nrequest"
  "_id\030\001 \001(\t\022\024\n\007user_id\030\002 \001(\tH\000\210\001\001\022\027\n\nsessi"
  "on_id\030\003 \001(\tH\001\210\001\001\022*\n\tfile_data\030\004 \001(\0132\027.ch"
  "at_ns.FileUploadDataB\n\n\010_user_idB\r\n\013_ses"
  "sion_id\"t\n\020PutSingleFileRsp\022\022\n\nrequest_i"
  "d\030\001 \001(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t"
  "\022+\n\tfile_info\030\004 \001(\0132\030.chat_ns.FileMessag"
  "eInfo\"\233\001\n\017PutMultiFileReq\022\022\n\nrequest_id\030"
  "\001 \001(\t\022\024\n\007user_id\030\002 \001(\tH\000\210\001\001\022\027\n\nsession_i"
  "d\030\003 \001(\tH\001\210\001\001\022*\n\tfile_data\030\004 \003(\0132\027.chat_n"
  "s.FileUploadDataB\n\n\010_user_idB\r\n\013_session"
  "_id\"s\n\017PutMultiFileRsp\022\022\n\nrequest_id\030\001 \001"
  "(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006errmsg\030\003 \001(\t\022+\n\tf"
  "ile_info\030\004 \003(\0132\030.chat_ns.FileMessageInfo"
  "2\243\002\n\013FileService\022E\n\rGetSingleFile\022\031.chat"
  "_ns.GetSingleFileReq\032\031.chat_ns.GetSingle"
  "FileRsp\022B\n\014GetMultiFile\022\030.chat_ns.GetMul"
  "tiFileReq\032\030.chat_ns.GetMultiFileRsp\022E\n\rP"
  "utSingleFile\022\031.chat_ns.PutSingleFileReq\032"
  "\031.chat_ns.PutSingleFileRsp\022B\n\014PutMultiFi"
  "le\022\030.chat_ns.PutMultiFileReq\032\030.chat_ns.P"
  "utMultiFileRspB\003\200\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_file_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_file_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_file_2eproto = {
    false, false, 1507, descriptor_table_protodef_file_2eproto,
    "file.proto",
    &descriptor_table_file_2eproto_once, descriptor_table_file_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_file_2eproto::offsets,
    file_level_metadata_file_2eproto, file_level_enum_descriptors_file_2eproto,
    file_level_service_descriptors_file_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_file_2eproto_getter() {
  return &descriptor_table_file_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_file_2eproto(&descriptor_table_file_2eproto);
namespace chat_ns {

// ===================================================================

class GetSingleFileReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSingleFileReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetSingleFileReq::GetSingleFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.GetSingleFileReq)
}
GetSingleFileReq::GetSingleFileReq(const GetSingleFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSingleFileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    _this->_impl_.file_id_.Set(from._internal_file_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat_ns.GetSingleFileReq)
}

inline void GetSingleFileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSingleFileReq::~GetSingleFileReq() {
  // @@protoc_insertion_point(destructor:chat_ns.GetSingleFileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSingleFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.file_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
}

void GetSingleFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSingleFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.GetSingleFileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.file_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSingleFileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetSingleFileReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // string file_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetSingleFileReq.file_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetSingleFileReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetSingleFileReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSingleFileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.GetSingleFileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetSingleFileReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // string file_id = 2;
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetSingleFileReq.file_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_id(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetSingleFileReq.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // optional string session_id = 4;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetSingleFileReq.session_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.GetSingleFileReq)
  return target;
}

size_t GetSingleFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.GetSingleFileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string file_id = 2;
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSingleFileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSingleFileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSingleFileReq::GetClassData() const { return &_class_data_; }


void GetSingleFileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSingleFileReq*>(&to_msg);
  auto& from = static_cast<const GetSingleFileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.GetSingleFileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_file_id().empty()) {
    _this->_internal_set_file_id(from._internal_file_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSingleFileReq::CopyFrom(const GetSingleFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.GetSingleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSingleFileReq::IsInitialized() const {
  return true;
}

void GetSingleFileReq::InternalSwap(GetSingleFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_id_, lhs_arena,
      &other->_impl_.file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSingleFileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[0]);
}

// ===================================================================

class GetSingleFileRsp::_Internal {
 public:
  using HasBits = decltype(std::declval<GetSingleFileRsp>()._impl_._has_bits_);
  static const ::chat_ns::FileDownloadData& file_data(const GetSingleFileRsp* msg);
  static void set_has_file_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::chat_ns::FileDownloadData&
GetSingleFileRsp::_Internal::file_data(const GetSingleFileRsp* msg) {
  return *msg->_impl_.file_data_;
}
void GetSingleFileRsp::clear_file_data() {
  if (_impl_.file_data_ != nullptr) _impl_.file_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetSingleFileRsp::GetSingleFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.GetSingleFileRsp)
}
GetSingleFileRsp::GetSingleFileRsp(const GetSingleFileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetSingleFileRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.file_data_){nullptr}
    , decltype(_impl_.success_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file_data()) {
    _this->_impl_.file_data_ = new ::chat_ns::FileDownloadData(*from._impl_.file_data_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:chat_ns.GetSingleFileRsp)
}

inline void GetSingleFileRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.file_data_){nullptr}
    , decltype(_impl_.success_){false}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSingleFileRsp::~GetSingleFileRsp() {
  // @@protoc_insertion_point(destructor:chat_ns.GetSingleFileRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSingleFileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_data_;
}

void GetSingleFileRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSingleFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.GetSingleFileRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.file_data_ != nullptr);
    _impl_.file_data_->Clear();
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSingleFileRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetSingleFileRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetSingleFileRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // optional .chat_ns.FileDownloadData file_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSingleFileRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.GetSingleFileRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetSingleFileRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetSingleFileRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // optional .chat_ns.FileDownloadData file_data = 4;
  if (_internal_has_file_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file_data(this),
        _Internal::file_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.GetSingleFileRsp)
  return target;
}

size_t GetSingleFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.GetSingleFileRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // optional .chat_ns.FileDownloadData file_data = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_data_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSingleFileRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetSingleFileRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSingleFileRsp::GetClassData() const { return &_class_data_; }


void GetSingleFileRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetSingleFileRsp*>(&to_msg);
  auto& from = static_cast<const GetSingleFileRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.GetSingleFileRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_has_file_data()) {
    _this->_internal_mutable_file_data()->::chat_ns::FileDownloadData::MergeFrom(
        from._internal_file_data());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSingleFileRsp::CopyFrom(const GetSingleFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.GetSingleFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSingleFileRsp::IsInitialized() const {
  return true;
}

void GetSingleFileRsp::InternalSwap(GetSingleFileRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSingleFileRsp, _impl_.success_)
      + sizeof(GetSingleFileRsp::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetSingleFileRsp, _impl_.file_data_)>(
          reinterpret_cast<char*>(&_impl_.file_data_),
          reinterpret_cast<char*>(&other->_impl_.file_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSingleFileRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[1]);
}

// ===================================================================

class GetMultiFileReq::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMultiFileReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GetMultiFileReq::GetMultiFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.GetMultiFileReq)
}
GetMultiFileReq::GetMultiFileReq(const GetMultiFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMultiFileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_id_list_){from._impl_.file_id_list_}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat_ns.GetMultiFileReq)
}

inline void GetMultiFileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_id_list_){arena}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMultiFileReq::~GetMultiFileReq() {
  // @@protoc_insertion_point(destructor:chat_ns.GetMultiFileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMultiFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_id_list_.~RepeatedPtrField();
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
}

void GetMultiFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMultiFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.GetMultiFileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_id_list_.Clear();
  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMultiFileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetMultiFileReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetMultiFileReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetMultiFileReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string file_id_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_id_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetMultiFileReq.file_id_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMultiFileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.GetMultiFileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetMultiFileReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetMultiFileReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetMultiFileReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // repeated string file_id_list = 4;
  for (int i = 0, n = this->_internal_file_id_list_size(); i < n; i++) {
    const auto& s = this->_internal_file_id_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetMultiFileReq.file_id_list");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.GetMultiFileReq)
  return target;
}

size_t GetMultiFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.GetMultiFileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_id_list = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.file_id_list_.size());
  for (int i = 0, n = _impl_.file_id_list_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.file_id_list_.Get(i));
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMultiFileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMultiFileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMultiFileReq::GetClassData() const { return &_class_data_; }


void GetMultiFileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMultiFileReq*>(&to_msg);
  auto& from = static_cast<const GetMultiFileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.GetMultiFileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_id_list_.MergeFrom(from._impl_.file_id_list_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMultiFileReq::CopyFrom(const GetMultiFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.GetMultiFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiFileReq::IsInitialized() const {
  return true;
}

void GetMultiFileReq::InternalSwap(GetMultiFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_id_list_.InternalSwap(&other->_impl_.file_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMultiFileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[2]);
}

// ===================================================================

GetMultiFileRsp_FileDataEntry_DoNotUse::GetMultiFileRsp_FileDataEntry_DoNotUse() {}
GetMultiFileRsp_FileDataEntry_DoNotUse::GetMultiFileRsp_FileDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetMultiFileRsp_FileDataEntry_DoNotUse::MergeFrom(const GetMultiFileRsp_FileDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetMultiFileRsp_FileDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[3]);
}

// ===================================================================

class GetMultiFileRsp::_Internal {
 public:
};

void GetMultiFileRsp::clear_file_data() {
  _impl_.file_data_.Clear();
}
GetMultiFileRsp::GetMultiFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GetMultiFileRsp::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:chat_ns.GetMultiFileRsp)
}
GetMultiFileRsp::GetMultiFileRsp(const GetMultiFileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMultiFileRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.file_data_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.file_data_.MergeFrom(from._impl_.file_data_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:chat_ns.GetMultiFileRsp)
}

inline void GetMultiFileRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.file_data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMultiFileRsp::~GetMultiFileRsp() {
  // @@protoc_insertion_point(destructor:chat_ns.GetMultiFileRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GetMultiFileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_data_.Destruct();
  _impl_.file_data_.~MapField();
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void GetMultiFileRsp::ArenaDtor(void* object) {
  GetMultiFileRsp* _this = reinterpret_cast< GetMultiFileRsp* >(object);
  _this->_impl_.file_data_.Destruct();
}
void GetMultiFileRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMultiFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.GetMultiFileRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_data_.Clear();
  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMultiFileRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetMultiFileRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.GetMultiFileRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .chat_ns.FileDownloadData> file_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.file_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetMultiFileRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.GetMultiFileRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetMultiFileRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.GetMultiFileRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // map<string, .chat_ns.FileDownloadData> file_data = 4;
  if (!this->_internal_file_data().empty()) {
    using MapType = ::_pb::Map<std::string, ::chat_ns::FileDownloadData>;
    using WireHelper = GetMultiFileRsp_FileDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_file_data();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "chat_ns.GetMultiFileRsp.FileDataEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.GetMultiFileRsp)
  return target;
}

size_t GetMultiFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.GetMultiFileRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .chat_ns.FileDownloadData> file_data = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_file_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::chat_ns::FileDownloadData >::const_iterator
      it = this->_internal_file_data().begin();
      it != this->_internal_file_data().end(); ++it) {
    total_size += GetMultiFileRsp_FileDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMultiFileRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMultiFileRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMultiFileRsp::GetClassData() const { return &_class_data_; }


void GetMultiFileRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMultiFileRsp*>(&to_msg);
  auto& from = static_cast<const GetMultiFileRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.GetMultiFileRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_data_.MergeFrom(from._impl_.file_data_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMultiFileRsp::CopyFrom(const GetMultiFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.GetMultiFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiFileRsp::IsInitialized() const {
  return true;
}

void GetMultiFileRsp::InternalSwap(GetMultiFileRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_data_.InternalSwap(&other->_impl_.file_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMultiFileRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[4]);
}

// ===================================================================

class PutSingleFileReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PutSingleFileReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::chat_ns::FileUploadData& file_data(const PutSingleFileReq* msg);
};

const ::chat_ns::FileUploadData&
PutSingleFileReq::_Internal::file_data(const PutSingleFileReq* msg) {
  return *msg->_impl_.file_data_;
}
void PutSingleFileReq::clear_file_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_data_ != nullptr) {
    delete _impl_.file_data_;
  }
  _impl_.file_data_ = nullptr;
}
PutSingleFileReq::PutSingleFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.PutSingleFileReq)
}
PutSingleFileReq::PutSingleFileReq(const PutSingleFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutSingleFileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.file_data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file_data()) {
    _this->_impl_.file_data_ = new ::chat_ns::FileUploadData(*from._impl_.file_data_);
  }
  // @@protoc_insertion_point(copy_constructor:chat_ns.PutSingleFileReq)
}

inline void PutSingleFileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.file_data_){nullptr}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutSingleFileReq::~PutSingleFileReq() {
  // @@protoc_insertion_point(destructor:chat_ns.PutSingleFileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutSingleFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_data_;
}

void PutSingleFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutSingleFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.PutSingleFileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.file_data_ != nullptr) {
    delete _impl_.file_data_;
  }
  _impl_.file_data_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutSingleFileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutSingleFileReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutSingleFileReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutSingleFileReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // .chat_ns.FileUploadData file_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutSingleFileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.PutSingleFileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutSingleFileReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutSingleFileReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutSingleFileReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .chat_ns.FileUploadData file_data = 4;
  if (this->_internal_has_file_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file_data(this),
        _Internal::file_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.PutSingleFileReq)
  return target;
}

size_t PutSingleFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.PutSingleFileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  // .chat_ns.FileUploadData file_data = 4;
  if (this->_internal_has_file_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutSingleFileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutSingleFileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutSingleFileReq::GetClassData() const { return &_class_data_; }


void PutSingleFileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutSingleFileReq*>(&to_msg);
  auto& from = static_cast<const PutSingleFileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.PutSingleFileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  if (from._internal_has_file_data()) {
    _this->_internal_mutable_file_data()->::chat_ns::FileUploadData::MergeFrom(
        from._internal_file_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutSingleFileReq::CopyFrom(const PutSingleFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.PutSingleFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSingleFileReq::IsInitialized() const {
  return true;
}

void PutSingleFileReq::InternalSwap(PutSingleFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.file_data_, other->_impl_.file_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutSingleFileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[5]);
}

// ===================================================================

class PutSingleFileRsp::_Internal {
 public:
  static const ::chat_ns::FileMessageInfo& file_info(const PutSingleFileRsp* msg);
};

const ::chat_ns::FileMessageInfo&
PutSingleFileRsp::_Internal::file_info(const PutSingleFileRsp* msg) {
  return *msg->_impl_.file_info_;
}
void PutSingleFileRsp::clear_file_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_info_ != nullptr) {
    delete _impl_.file_info_;
  }
  _impl_.file_info_ = nullptr;
}
PutSingleFileRsp::PutSingleFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.PutSingleFileRsp)
}
PutSingleFileRsp::PutSingleFileRsp(const PutSingleFileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutSingleFileRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.file_info_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file_info()) {
    _this->_impl_.file_info_ = new ::chat_ns::FileMessageInfo(*from._impl_.file_info_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:chat_ns.PutSingleFileRsp)
}

inline void PutSingleFileRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.file_info_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutSingleFileRsp::~PutSingleFileRsp() {
  // @@protoc_insertion_point(destructor:chat_ns.PutSingleFileRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutSingleFileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_info_;
}

void PutSingleFileRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutSingleFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.PutSingleFileRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.file_info_ != nullptr) {
    delete _impl_.file_info_;
  }
  _impl_.file_info_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutSingleFileRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutSingleFileRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutSingleFileRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // .chat_ns.FileMessageInfo file_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutSingleFileRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.PutSingleFileRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutSingleFileRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutSingleFileRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // .chat_ns.FileMessageInfo file_info = 4;
  if (this->_internal_has_file_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::file_info(this),
        _Internal::file_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.PutSingleFileRsp)
  return target;
}

size_t PutSingleFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.PutSingleFileRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // .chat_ns.FileMessageInfo file_info = 4;
  if (this->_internal_has_file_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_info_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutSingleFileRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutSingleFileRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutSingleFileRsp::GetClassData() const { return &_class_data_; }


void PutSingleFileRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutSingleFileRsp*>(&to_msg);
  auto& from = static_cast<const PutSingleFileRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.PutSingleFileRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_has_file_info()) {
    _this->_internal_mutable_file_info()->::chat_ns::FileMessageInfo::MergeFrom(
        from._internal_file_info());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutSingleFileRsp::CopyFrom(const PutSingleFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.PutSingleFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutSingleFileRsp::IsInitialized() const {
  return true;
}

void PutSingleFileRsp::InternalSwap(PutSingleFileRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PutSingleFileRsp, _impl_.success_)
      + sizeof(PutSingleFileRsp::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(PutSingleFileRsp, _impl_.file_info_)>(
          reinterpret_cast<char*>(&_impl_.file_info_),
          reinterpret_cast<char*>(&other->_impl_.file_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PutSingleFileRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[6]);
}

// ===================================================================

class PutMultiFileReq::_Internal {
 public:
  using HasBits = decltype(std::declval<PutMultiFileReq>()._impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void PutMultiFileReq::clear_file_data() {
  _impl_.file_data_.Clear();
}
PutMultiFileReq::PutMultiFileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.PutMultiFileReq)
}
PutMultiFileReq::PutMultiFileReq(const PutMultiFileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutMultiFileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_data_){from._impl_.file_data_}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chat_ns.PutMultiFileReq)
}

inline void PutMultiFileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.file_data_){arena}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.session_id_){}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutMultiFileReq::~PutMultiFileReq() {
  // @@protoc_insertion_point(destructor:chat_ns.PutMultiFileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutMultiFileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_data_.~RepeatedPtrField();
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
}

void PutMultiFileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutMultiFileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.PutMultiFileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_data_.Clear();
  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.session_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutMultiFileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutMultiFileReq.request_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutMultiFileReq.user_id"));
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutMultiFileReq.session_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .chat_ns.FileUploadData file_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutMultiFileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.PutMultiFileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutMultiFileReq.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // optional string user_id = 2;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutMultiFileReq.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  // optional string session_id = 3;
  if (_internal_has_session_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutMultiFileReq.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // repeated .chat_ns.FileUploadData file_data = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.PutMultiFileReq)
  return target;
}

size_t PutMultiFileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.PutMultiFileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chat_ns.FileUploadData file_data = 4;
  total_size += 1UL * this->_internal_file_data_size();
  for (const auto& msg : this->_impl_.file_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string user_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string session_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutMultiFileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutMultiFileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutMultiFileReq::GetClassData() const { return &_class_data_; }


void PutMultiFileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutMultiFileReq*>(&to_msg);
  auto& from = static_cast<const PutMultiFileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.PutMultiFileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_data_.MergeFrom(from._impl_.file_data_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_session_id(from._internal_session_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutMultiFileReq::CopyFrom(const PutMultiFileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.PutMultiFileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutMultiFileReq::IsInitialized() const {
  return true;
}

void PutMultiFileReq::InternalSwap(PutMultiFileReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.file_data_.InternalSwap(&other->_impl_.file_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PutMultiFileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[7]);
}

// ===================================================================

class PutMultiFileRsp::_Internal {
 public:
};

void PutMultiFileRsp::clear_file_info() {
  _impl_.file_info_.Clear();
}
PutMultiFileRsp::PutMultiFileRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:chat_ns.PutMultiFileRsp)
}
PutMultiFileRsp::PutMultiFileRsp(const PutMultiFileRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PutMultiFileRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_info_){from._impl_.file_info_}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:chat_ns.PutMultiFileRsp)
}

inline void PutMultiFileRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_info_){arena}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.errmsg_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PutMultiFileRsp::~PutMultiFileRsp() {
  // @@protoc_insertion_point(destructor:chat_ns.PutMultiFileRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PutMultiFileRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_info_.~RepeatedPtrField();
  _impl_.request_id_.Destroy();
  _impl_.errmsg_.Destroy();
}

void PutMultiFileRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PutMultiFileRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:chat_ns.PutMultiFileRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_info_.Clear();
  _impl_.request_id_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PutMultiFileRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutMultiFileRsp.request_id"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string errmsg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "chat_ns.PutMultiFileRsp.errmsg"));
        } else
          goto handle_unusual;
        continue;
      // repeated .chat_ns.FileMessageInfo file_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PutMultiFileRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chat_ns.PutMultiFileRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutMultiFileRsp.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmsg().data(), static_cast<int>(this->_internal_errmsg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chat_ns.PutMultiFileRsp.errmsg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmsg(), target);
  }

  // repeated .chat_ns.FileMessageInfo file_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat_ns.PutMultiFileRsp)
  return target;
}

size_t PutMultiFileRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat_ns.PutMultiFileRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chat_ns.FileMessageInfo file_info = 4;
  total_size += 1UL * this->_internal_file_info_size();
  for (const auto& msg : this->_impl_.file_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // string errmsg = 3;
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmsg());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PutMultiFileRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PutMultiFileRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PutMultiFileRsp::GetClassData() const { return &_class_data_; }


void PutMultiFileRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PutMultiFileRsp*>(&to_msg);
  auto& from = static_cast<const PutMultiFileRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chat_ns.PutMultiFileRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_info_.MergeFrom(from._impl_.file_info_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PutMultiFileRsp::CopyFrom(const PutMultiFileRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat_ns.PutMultiFileRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutMultiFileRsp::IsInitialized() const {
  return true;
}

void PutMultiFileRsp::InternalSwap(PutMultiFileRsp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_info_.InternalSwap(&other->_impl_.file_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.request_id_, lhs_arena,
      &other->_impl_.request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errmsg_, lhs_arena,
      &other->_impl_.errmsg_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutMultiFileRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_file_2eproto_getter, &descriptor_table_file_2eproto_once,
      file_level_metadata_file_2eproto[8]);
}

// ===================================================================

FileService::~FileService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FileService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_file_2eproto);
  return file_level_service_descriptors_file_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* FileService::GetDescriptor() {
  return descriptor();
}

void FileService::GetSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::chat_ns::GetSingleFileReq*,
                         ::chat_ns::GetSingleFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSingleFile() not implemented.");
  done->Run();
}

void FileService::GetMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::chat_ns::GetMultiFileReq*,
                         ::chat_ns::GetMultiFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetMultiFile() not implemented.");
  done->Run();
}

void FileService::PutSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::chat_ns::PutSingleFileReq*,
                         ::chat_ns::PutSingleFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PutSingleFile() not implemented.");
  done->Run();
}

void FileService::PutMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::chat_ns::PutMultiFileReq*,
                         ::chat_ns::PutMultiFileRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PutMultiFile() not implemented.");
  done->Run();
}

void FileService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_file_2eproto[0]);
  switch(method->index()) {
    case 0:
      GetSingleFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::chat_ns::GetSingleFileReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::chat_ns::GetSingleFileRsp*>(
                 response),
             done);
      break;
    case 1:
      GetMultiFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::chat_ns::GetMultiFileReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::chat_ns::GetMultiFileRsp*>(
                 response),
             done);
      break;
    case 2:
      PutSingleFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::chat_ns::PutSingleFileReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::chat_ns::PutSingleFileRsp*>(
                 response),
             done);
      break;
    case 3:
      PutMultiFile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::chat_ns::PutMultiFileReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::chat_ns::PutMultiFileRsp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FileService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chat_ns::GetSingleFileReq::default_instance();
    case 1:
      return ::chat_ns::GetMultiFileReq::default_instance();
    case 2:
      return ::chat_ns::PutSingleFileReq::default_instance();
    case 3:
      return ::chat_ns::PutMultiFileReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& FileService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::chat_ns::GetSingleFileRsp::default_instance();
    case 1:
      return ::chat_ns::GetMultiFileRsp::default_instance();
    case 2:
      return ::chat_ns::PutSingleFileRsp::default_instance();
    case 3:
      return ::chat_ns::PutMultiFileRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

FileService_Stub::FileService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
FileService_Stub::FileService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
FileService_Stub::~FileService_Stub() {
  if (owns_channel_) delete channel_;
}

void FileService_Stub::GetSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::chat_ns::GetSingleFileReq* request,
                              ::chat_ns::GetSingleFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void FileService_Stub::GetMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::chat_ns::GetMultiFileReq* request,
                              ::chat_ns::GetMultiFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void FileService_Stub::PutSingleFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::chat_ns::PutSingleFileReq* request,
                              ::chat_ns::PutSingleFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void FileService_Stub::PutMultiFile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::chat_ns::PutMultiFileReq* request,
                              ::chat_ns::PutMultiFileRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat_ns
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chat_ns::GetSingleFileReq*
Arena::CreateMaybeMessage< ::chat_ns::GetSingleFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::GetSingleFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::GetSingleFileRsp*
Arena::CreateMaybeMessage< ::chat_ns::GetSingleFileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::GetSingleFileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::GetMultiFileReq*
Arena::CreateMaybeMessage< ::chat_ns::GetMultiFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::GetMultiFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::GetMultiFileRsp_FileDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::GetMultiFileRsp*
Arena::CreateMaybeMessage< ::chat_ns::GetMultiFileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::GetMultiFileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::PutSingleFileReq*
Arena::CreateMaybeMessage< ::chat_ns::PutSingleFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::PutSingleFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::PutSingleFileRsp*
Arena::CreateMaybeMessage< ::chat_ns::PutSingleFileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::PutSingleFileRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::PutMultiFileReq*
Arena::CreateMaybeMessage< ::chat_ns::PutMultiFileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::PutMultiFileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::chat_ns::PutMultiFileRsp*
Arena::CreateMaybeMessage< ::chat_ns::PutMultiFileRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chat_ns::PutMultiFileRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
